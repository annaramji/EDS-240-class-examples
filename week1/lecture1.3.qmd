---
title: "Lecture 1.3"
date: 2024-01-08
---

## Load packages

```{r}
library(tidyverse)
library(palmerpenguins)
```

## Tidy data 

In Tidy Data:

- each variable forms a column
- each observation forms a row
- each cell forms a single measurement

```{r}
# untidy data ----
temp_data_wide <- tribble(
  ~date, ~station1, ~station2,  ~station3,
  "2023-10-01", 30.1, 29.8,  31.2,
  "2023-11-01", 28.6, 29.1,  33.4,
  "2023-12-01", 29.9, 28.5,  32.3
)

# make tidy ----
temp_data_long <- temp_data_wide |> 
  pivot_longer(cols = starts_with("station"),
               names_to = "station_id", 
               values_to = "temp_c")
```


Now each station (1, 2, or 3) falls under the "station_id" column/variable and each row contains a single observation, containing information on date, station ID, and temperature (ºC).


## Plotting

Graphic layers:

1. data – in tidy format + define aesthetics (how variables map onto a plot e.g. axes, shape, color, size)
2. geometric objects (aka geoms) – define the type of plot(s)
3. statistical transformations – algorithm used to calculate new values for a graph
4. position adjustments – control the fine details of position when geoms might otherwise overlap
5. coordinate system – change what x and y axes mean (e.g. Cartesian (default), polar, flipped)
6. facet – create subplots that each display one subset of the data

“Enhancing communication” layers:

1. labels – add / update titles, axis / legend labels
2. annotations – add textual labels (e.g. to highlight specific data points or trend lines, etc.)
3. scales – update how the aesthetic mappings manifest visually (e.g. colors scales, axis ticks, legends)
4. themes– customize the non-data elements of your plot
5. layout – combine multiple plots into the same graphic

### Plot 1: Scales


**Discrete scale (assigned to species (factor)) with manually customized color, locally mapped color:**

```{r customized-color-scales}
ggplot(data = na.omit(penguins), # removing NAs (observations where species wasn't clear/recorded)
       aes(x = bill_length_mm, 
           y = bill_depth_mm)) +
  # you could also individually specify the mapping in the geom_ layer and have the data in that same layer
  #  geom_point(mapping = aes(x = .......), data = .....)
  geom_point(aes(color = species)) + # map color locally, not globally 
  # matching Allison's colors
  scale_color_manual(values = c("#FF8302", # Adelie ("darkorange")
                                "#C35CCA", # Chinstrap ("purple")
                                "#067575")) # Gentoo ("cyan4")
```


```{r different-levels-lm}
ggplot(data = penguins, aes(x = bill_length_mm,
                            y = bill_depth_mm)) +
  geom_point(aes(color = species)) + # map color locally, not globally 
  geom_smooth(method = "lm")  # can optionally add linear model fit line -- note that this is impacted by what level you assign your color scale to (local vs. global)

ggplot(data = penguins, aes(x = bill_length_mm,
                            y = bill_depth_mm,
                            color = species)) + # map color globally, not globally 
  geom_point() + 
  geom_smooth(method = "lm")  # can optionally add linear model fit line -- note that this is impacted by what level you assign your color scale to (local vs. global)
```

When we map our color locally (i.e., `aes()` in the geometric object layer `geom_point()`), `geom_smooth()` creates a best-fit line for all of our total points, because it is calling on the global-level mapping, which doesn't specify that species grouping that we have in our `geom_point(aes())` layer.

When the color is mapped globally, `geom_smooth()` matches that mapping and creates best-fit lines following a simple linear model across each of the species groups.



**Continuous scale of body mass variable, color is globally mapped to body mass**

```{r continuous-scale}
ggplot(data = na.omit(penguins),
       aes(x = body_mass_g,
           y = flipper_length_mm,
           color = body_mass_g)) +
  geom_point() +
  scale_color_gradient(low = "#132B43", # very dark blue 
                       high = "#F7DD4C") # yellow
```

Customized continuous color gradient scale: using `scale_color_gradient`, specifying dark blue for low values and yellow for high values.


This doesn't really show new information, it can just make it more visually appealing to some audiences.



### Plot 2: Themes


The default stat for `geom_bar()` is “count”

Every geom has a default stat – meaning you can typically use geoms without worrying about the underlying statistical transformation.

The default statistical transformation used in `geom_bar()` is count, which first groups our categorical variable (`species`), then calculates a count for each unique level (Adelie, Chinstrap, Gentoo).

```{r}
ggplot(data = penguins, 
       aes(x = species)) +
  geom_bar(stat = "count") # you don't need to explicitly include `stat = "count"` since it's the default
```

Each bar represents a species count (note the y-axis, count, which is not a variable in our penguins data set)

The following code outputs the same plot as the default
```{r}
# library(palmerpenguins)
# library(tidyverse)
# 
penguin_summary <- penguins |>
  count(species) # calculate number of observations (rows) for each species

ggplot(penguin_summary, aes(x = species, y = n)) +
  geom_bar(stat = "identity")
```


**We can override the default stat *mapping*:**

Now let’s say we’d like to display the same bar chart with y-axis values as proportions, rather than counts. We can override the default mapping from transformed variables to aesthetics by doing the following:

```{r}
ggplot(penguins, aes(x = species,
                     y = after_stat(prop), # new function: aes_eval: control aesthetic evaluation
                     group = 1)) +
  geom_bar()
```

NOTE: 

Including `group = 1` overrides the default behavior of geom_bar() to group by the x variable. The default behavior of `geom_bar()` is to group by the x variable (for us, that's species) to separately count the number of rows in each level (Adelie, Chinstrap, Gentoo). If we want proportions, we need to consider all levels of species together to calculate the proportion of each level of species relative to all levels of species


**We can use stat_summary() to compute & plot any aggregate:**

Here, we plot the min, mean, and max values of penguin body_mass_g by species:

```{r}
ggplot(penguins) +
  stat_summary(
    aes(x = species, y = body_mass_g),
    fun.max = max, 
    fun.min = min,
    fun = mean
  )
```


**What is a position adjustment?**

Position adjustments apply minor tweaks to the position of elements to resolve overlapping geoms. For example, let’s say we would like to visualize penguin counts by `species` (bar height) and by `island` (color) using our bar chart from earlier. We could add the fill aesthetic:

The default position for `geom_bar()` is “stack”

Every geom has a default position. The default position used in `geom_bar()` is stack, which stacks bars on top of one another, based on the fill value (here, that’s `island`):

```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "stack") # you don't need to explicitly include `position = "stack"` since it's the default
# position = "fill" sets it to be a proportion of the total observations
```
- position = "fill" creates a set of stacked bars but makes each set the same height (easier to compare proportions across groups)

**Alternative position adjustment:**

- position = "dodge" places overlapping bars directly beside one another (easier to compare individual values)

```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "dodge")
```



**Alternatively, use position = position_*()**

Instead of position = "X", you can use functions to update and further adjust your geom’s positions. 

Here, we’ll use `position_dodge2()` to also **ensure the widths of each of our bars are equal!!**:


```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = position_dodge2(preserve = "single"))
```
- dodging preserves the width of a "single" element (could also specify "total")


#### Coordinate system

**What is a coordinate system?**

A Coordinate System is a system that uses one or more numbers (coordinates), to uniquely determine the position of points or other geometric elements. By default, ggplots are constructed in a Cartesian coordinate system, consisting of a horizontal x-axis and vertical y-axis.

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  coord_cartesian() # you don't need to explicitly include `coord_cartesian()` since it's the default
```


**Changing coordinate systems**

Depending on the type of data, axis label length, etc. it may make sense to change this coordinate system. Two options for our bar plot:

1. `coord_flip()` switches the x and y axes

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() + 
  coord_flip()
```

2. `coord_polar()` uses polar coordinates

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() + 
  coord_polar()
```



### Themes

Use pre-made themes to update plot appearance

ggplot2 comes with a number of complete themes, which control all non-data display. See two examples below:


```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  theme_classic()
```
- displays x and y axis lines and no gridlines

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  theme_light()
```

- displays light grey lines and axes

Further modify nearly any non-data element of your plot using theme().

```{r}

ggplot(penguins, aes(x = species)) +
  geom_bar() +
  theme_light() +
  theme(
    axis.title = element_text(size = 17, color = "purple")
  )
```



## Plot 3

In this next example, we’ll explore penguin flipper lengths. For this example, we’ll focus on understanding the following layers of a ggplot (bolded):

 Graphic layers:

**1. data – in tidy format + define aesthetics (how variables map onto a plot e.g. axes, shape, color, size)
2. geometric objects (aka geoms) – define the type of plot(s)
3. statistical transformations – algorithm used to calculate new values for a graph
4. position adjustments – control the fine details of position when geoms might otherwise overlap
5. coordinate system – change what x and y axes mean (e.g. Cartesian (default), polar, flipped)
6. facet – create subplots that each display one subset of the data

- selecting data, geoms, position adjustments, and facet

 “Enhancing communication” layers:

1. labels – add / update titles, axis / legend labels
2. annotations – add textual labels (e.g. to highlight specific data points or trend lines, etc.)
3. scales – update how the aesthetic mappings manifest visually (e.g. colors scales, axis ticks, legends)
4. themes– customize the non-data elements of your plot
5. layout – combine multiple plots into the same graphic

- selecting labels and scales

**Initialize + map aesthetics + define `geom`**

We’ll again start by initializing our plot object with data, mapping our aesthetics, and defining a geometric object. Note that the default statistical transformation for `geom_histogram()` is `stat = "bin"`:

```{r}
ggplot(penguins, aes(x = flipper_length_mm)) + 
  geom_histogram()
```

**Use color to differentiate species**

Just like in our scatterplot (Plot #1), we’ll modify our plot’s aesthetics (i.e. inside aes()) to color our histrogram bins according to the species variable. Unlike our scatterplot (which uses the color argument), we’ll use the fill argument to fill the bars with color (rather than outline them with color). We’ll also manually define our fill scale:

```{r}
ggplot(penguins, aes(x = flipper_length_mm, fill = species)) + 
  geom_histogram() +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575"))
```

Update the default position to "identity"

Let’s update the position of our binned bars from "stack" to "identity" and also increase the transparency (using alpha) so that we can see overlapping bars:

```{r}
ggplot(penguins, aes(x = flipper_length_mm, fill = species)) + 
  geom_histogram(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575"))

```



Update / add plot labels

Update axis and legend titles and add a plot title using `labs()`:

```{r}
ggplot(penguins, aes(x = flipper_length_mm, fill = species)) + 
  geom_histogram(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575")) +
  labs(x = "Flipper length (mm)", y = "Frequency", fill = "Species",
       title = "Penguin Flipper Lengths")
```


Create subplots using facets

Sometimes (particularly during the data exploration phase) it’s helpful to create subplots (i.e. separate panels) of your data. Here we use facet_wrap() to separate our data by the species variable. By default, it creates a 1 x 3 matrix of plots. We can manually specify how many rows or columns we’d like using nrow or ncol:

```{r}
ggplot(penguins, aes(x = flipper_length_mm, fill = species)) + 
  geom_histogram(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575")) +
  labs(x = "Flipper length (mm)", y = "Frequency", fill = "Species",
       title = "Penguin Flipper Lengths") + 
  facet_wrap(~species, ncol = 1) +
  theme_light()
```


