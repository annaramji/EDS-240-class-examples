---
author: "Anna Ramji"
date: 2024-02-05
title: "EDS 240: Lecture 5.2, Colors"
---

# Lecture 5.2: Colors

Why do we use color?

Spend a couple minutes discussing with your Learning Partners the following:

Why and / or when should we use color in data visualizations?

Find an example(s) of a data viz that uses color to convey information to share in #eds-240-data viz. Note some of your own observations about the color choices (i.e. why these colors? palette arrangement?).

**Choosing colors is difficult and they should be purposefully chosen**

You’ll probably iterate on them as you sit with your visualization and of course, as you get feedback from others.

**Some places to start / things to consider:**

-   is using color the best and / or only way to visually represent your variable(s)?

<!-- -->

-   are you designing for a particular organization / brand?

-   what emotions are you trying (or not trying) to elicit?

-   who is your audience?

-   are your data commonly represented using a particular color scheme?

-   what data types (e.g. numeric vs. categorical, discrete vs. continuous?) are you working with?

**What is color?**

There are a number of **different color spaces that are used to represent and define color**. [HSV and HSL](https://en.wikipedia.org/wiki/HSL_and_HSV#:~:text=HSL%20stands%20for%20hue%2C%20saturation,hue%2C%20saturation%2C%20and%20intensity.) are used commonly in color pickers (e.g. [Google color picker](https://www.google.com/search?q=google+color+picker&oq=google+color+picker&gs_lcrp=EgZjaHJvbWUqCggAEAAYsQMYgAQyCggAEAAYsQMYgAQyBggBEEUYQDIHCAIQABiABDIHCAMQABiABDIHCAQQABiABDIGCAUQRRg8MgYIBhBFGDwyBggHEEUYPNIBCDIwMDhqMGo0qAIAsAIA&sourceid=chrome&ie=UTF-8)). [HCL](https://en.wikipedia.org/wiki/HCL_color_space) underlies some default `{ggplot2}` parameters. You don’t need to worry much about the underlying theory of color spaces, but know that **changing any of the parameters (e.g. hue, saturation, etc.) can influence how we perceive information in a data visualization.**

-   HSV (Hue, Saturation, Value)

    -   Image source: [medium.com](https://medium.com/awkbit/choosing-a-color-scheme-for-your-website-awkbit-59ab750151dc)

-   HCL (Hue, Chroma, Luminance)

    -   Image source: Stauffer et al. (2015) <https://doi.org/10.1175/BAMS-D-13-00155.1>

**Different color scales for different data types**

-   Ex: shows infographic with 2 categories:

    -   Quantitative color scales:

        -   sequential & classified / unclassified

        -   diverging & unclassed vs classed (think bins vs gradient or palette)

    -   qualitative color scales:

        -   categorical

-   Image source: [Which color scale to use when visualizing data](https://blog.datawrapper.de/which-color-scale-to-use-in-data-vis/), by Lisa Charlottte Muth. This is the first article of a 4 part series ([Part 2](https://blog.datawrapper.de/quantitative-vs-qualitative-color-scales/) / [Part 3](https://blog.datawrapper.de/diverging-vs-sequential-color-scales/) / [Part 4](https://blog.datawrapper.de/classed-vs-unclassed-color-scales/)) – Sam highly recommends reading!

**Categorical scales**

-   mainly formed by selecting differet *hues*

<!-- -->

-   hues assigned to each group must be distinct and ideally have different lightnesses

-   groups don’t have an intrinsic order

-   limit to no more than 7 hues

Map source: [Analyzing US Census Data](https://walker-data.com/census-r/index.html), by Kyle Walker

**Sequential scales**

<https://samanthacsik.github.io/EDS-240-data-viz/slides/week5.2-colors-slides.html#/sequential>

-   colors assigned to data values in a continuum, based on lightness, hue, or both

<!-- -->

-   lower values typically associated with lighter colors & higher values associated with darker colors

-   can use a single hue *or* two hues

**Diverging scales:**

-   combination of two sequential palettes with a shared endpoint at the central value

-   central value is assigned a light color (light gray is best)

-   use a distinctive hue for each of the component palettes

Map source: [2020 U.S. Election Mapped: TrumpLand vs Biden Archipelago](https://vividmaps.com/us-election-2020/), by Vivid Maps

**Base plots (for applying color scales to)**

"We’ll be testing out different palettes throughout this lesson. Instead of having to retype the code for our plots each time, let’s create and save two versions of a penguin scatterplot. We can then call either of these plot objects to modify with different color scales:"

```{r library}
library(palmerpenguins)
library(tidyverse)
```

Requires a categorical color scale:

```{r}
cat_color_plot <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = species)) +
  geom_point(size = 4, alpha = 0.8)

cat_color_plot 
```

Requires a continuous color scale:

```{r}
cont_color_plot <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) 

cont_color_plot 
```

## Ensuring inclusive and accessible design through your color choices

## 

**What is colorblindness?**

Color vision deficiency aka colorblindness is the decreased ability to see color or differences in color. It’s estimated that about 1 in 12 men (8%) and 1 in 200 women (0.5%) are affected ([Wikipedia](https://en.wikipedia.org/wiki/Color_blindness)).

Color plate tests are used to help identify different forms of color blindness. Try using the [Let’s get color blind](https://chromewebstore.google.com/detail/lets-get-color-blind/bkdgdianpkfahpkmphgehigalpighjck) Chrome extension to emulate different forms of colorblindness while looking at the above plates. Image source: [American Optometric Association](https://www.aoa.org/healthy-eyes/eye-and-vision-conditions/color-vision-deficiency?sso=y)

**The problem with rainbow color maps**

-   colors don’t follow any natural perceived ordering (no innate sense of higher or lower)

<!-- -->

-   perceptual changes in rainbow colors are not uniform (e.g. colors appear to change faster in yellow region than green region)

-   insensitive to color vision deficiencies

Top image source: [Why we use bad color maps and what you cando about it](https://www.kennethmoreland.com/color-advice/BadColorMaps.pdf) \| Bottom left image source: Ware C, Stone M, Albers Szafir D (2023) Rainbow colormaps are not all bad. IEEE Computer Graphics and Applications 43:88-93 [10.1109/MCG.2023.3246111](https://www.computer.org/csdl/magazine/cg/2023/03/10128890/1NdJMHqISnS) \| For another example of poor use of rainbow color maps, see this [world map with binned colors](https://en.wikipedia.org/wiki/Poverty#/media/File:Countries_by_Human_Development_Index_(2020).png)

**Rainbow colormaps aren’t all bad**

-   Problematic, perceptually nonuniform and unordered rainbow colormaps

    -   <https://samanthacsik.github.io/EDS-240-data-viz/slides/images/week5/bad-rainbow.png>

-   Improved, perceptual uniform and diverging rainbow colormaps

    -   <https://samanthacsik.github.io/EDS-240-data-viz/slides/images/week5/better-rainbow.png>

Image source: Ware C, Stone M, Albers Szafir D (2023) Rainbow colormaps are not all bad. IEEE Computer Graphics and Applications 43:88-93 [10.1109/MCG.2023.3246111](https://www.computer.org/csdl/magazine/cg/2023/03/10128890/1NdJMHqISnS)

Also check out [Stoelzle & Stein (2021)](https://doi.org/10.5194/hess-25-4549-2021) (Figure 1 is particularly helpful!) and [Crameri et al. (2020)](https://doi.org/10.1038/s41467-020-19160-7) for some really great supplemental reading

## **Alternative: Viridis**

[The `viridis` color scales](https://ggplot2.tidyverse.org/reference/scale_viridis.html) are perceptually-uniform (even when printed in gray scale) and colorblindness-friendly:

<https://samanthacsik.github.io/EDS-240-data-viz/slides/images/week5/viridis-continuous.png>

<https://samanthacsik.github.io/EDS-240-data-viz/slides/images/week5/viridis-binned.png>

There are a number of different ways to apply `viridis` color scales, but I often opt for [`scale_*_viridis_*()` functions](https://ggplot2.tidyverse.org/reference/scale_viridis.html), which come pre-loaded with `{ggplot}`.

### **Using viridis color scales**

Discrete viridis scales:

```{r}
cat_color_plot +
  scale_color_viridis_d(option = "viridis")  # _d for discrete values

cat_color_plot +
  scale_color_viridis_d(option = "viridis",
                        direction = -1) # switch order of palette
```

Continuous viridis scales:

```{r}
cont_color_plot +
  scale_color_viridis_c(option = "magma") # _c for continuous
```

Check out the [documentation](https://ggplot2.tidyverse.org/reference/scale_viridis.html) and play around with some alternative options.

## **Alternative: RColorBrewer**

The [ColorBrewer color scales](https://ggplot2.tidyverse.org/reference/scale_brewer.html) provides color schemes for maps and other graphics. There is also a [web-based interface](http://colorbrewer2.org/) for generating palettes.

```{r}
RColorBrewer::display.brewer.all(colorblindFriendly = FALSE)

RColorBrewer::display.brewer.all(colorblindFriendly = TRUE)
```

`{RColorBrewer}` comes with a couple useful functions for quickly viewing and assembling your palette’s HEX codes:

```{r}
# Preview a palette with your number of desired colors:
RColorBrewer::display.brewer.pal(n = 6, name = 'Dark2')

# print HEX codes of your palette
RColorBrewer::brewer.pal(n = 6, name = 'Dark2')

# could save the palette using the hex codes from above, i.e.,

dark_pal_6 <- RColorBrewer::brewer.pal(n = 6, name = 'Dark2')
```

### **Using RColorBrewer color palettes**

Use the right function (all pre-loaded with `{ggplot2}`) for the type of data / palette:

```{r}
# Use scale_color_brewer() to apply qualitative palettes
 cat_color_plot +
  scale_color_brewer(palette = "Dark2") 

# Use scale_color_distiller() for unclassed versions of continuous color scales
cont_color_plot +
  scale_color_distiller(palette = "BuPu") # blue purple

# Use scale_color_fermenter() for classed versions of continuous color scales
# (binned palette)
cont_color_plot +
  scale_color_fermenter(palette = "YlGnBu") # you can choose many options to customize your palette in all of these
```

Check out the [documentation](https://ggplot2.tidyverse.org/reference/scale_brewer.html) and play around with some alternative options.

-   distiller:

    -   usually continuous colors

    -   like scale_color_continuous

-   fermenter:

    -   usually binned colors

    -   like scale_color_binned e.x.

**Tip: outline points to make light colors more visible**

Rather than `color` points by `body_mass_g`, we can `fill` points by `body_mass_g`. Then, we need to change the [`shape` of our points to `21`](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html#sec:shape-spec), which is the code for an outlined, fill-able point:

```{r}
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     fill = body_mass_g)) +
  geom_point(shape = 21, # represents a fillable point
             size = 4,
             alpha = 0.8) +
  scale_fill_distiller(palette = "BuPu") # make sure fill matches aes arg (color, fill)
```

Trick comes courtesy of [Albert Rapp](https://albert-rapp.de/) and his [How to Use Better Colors in ggplot (3 Easy Ways)](https://www.youtube.com/watch?v=ZVSbY4z7tMY) video tutorial. Check out his [YouTube channel](https://www.youtube.com/@rappa753) for *tons* of great R content.

------------------------------------------------------------------------

**Use redundant mapping whenever possible**

Recall that colors are [low on the hierarchy of elementary perceptual tasks](https://samanthacsik.github.io/EDS-240-data-viz/slides/week3.1-choosing-graphic-forms-slides.html#/hierarchy). **When possible, avoid conveying important information purely through color** – consider how you might additionally use shapes, symbols, typography, or annotations.

<https://samanthacsik.github.io/EDS-240-data-viz/slides/week5.2-colors-slides.html#/redundant-mapping>

Figure 2 from Apigo A and Oono R (2022) Plant abundance, but not plant evolutionary history, shapes patterns of host specificity in foliar fungal endophytes. Ecosphere. 13(1):e03879. <https://doi.org/10.1002/ecs2.3879>

There are *so many* other great pre-made color palettes to explore, many of which take into consideration color vision deficiencies (*but always double check!*)

------------------------------------------------------------------------

## **Use paletteer to access TONS of palettes**

It would be impossible to list out on one slide all the palette packages available for use, but the [`{paletteer}` package](https://emilhvitfeldt.github.io/paletteer/) gets close to doing just that.

It provides **a common interface for accessing a near-comprehensive list of palettes (over 2,000!!) across various packages**.

Explore the extensive list of [supported palette packages](https://emilhvitfeldt.github.io/paletteer/#included-packages)!

**Use `{paletteer}` to generate HEX codes *or* apply palettes directly**

-   **Generate a list of HEX codes** using one of [three `paletteer_*()` functions](https://emilhvitfeldt.github.io/paletteer/#examples)

<!-- -->

-   **Apply a palette directly to your ggplot** using one of [three `scale_*_paletteer_*()` functions](https://emilhvitfeldt.github.io/paletteer/#ggplot2-scales)

Find most palettes on the [**R Color Palettes**](https://emilhvitfeldt.github.io/r-color-palettes/) **website**

-   Click on any palette for more information & example plots

**Give `{paletteer}` a try (or use any package directly)!**

Update the colors of the plots below, either by using the `{paletteer}` package *or* by following the documentation for any specific package. It’s helpful to start by looking over the [list of supported packages](https://emilhvitfeldt.github.io/paletteer/#included-packages).

**Examples**

**superbloom3** palette from [`{calecopal}`](https://github.com/an-bui/calecopal), applied using the `paletteer::scale_color_paletteer_d()`

```{r}
cat_color_plot +
  paletteer::scale_color_paletteer_d("calecopal::superbloom3") +
  theme_bw()
```

**WindCave** palette from [`{NatParksPalette}`](https://github.com/kevinsblake/NatParksPalettes), created using `{NatParksPalette}` & applied using `scale_color_gradientn()`

```{r}
NatParksPalettes::natparks.pals(name = "WindCave",
                                n = 20, # specify number of values for color scale
                                type = "continuous") # specify type of scale

my_parks_palette <- NatParksPalettes::natparks.pals(name = "WindCave",
                                                    n = 20, 
                                                    type = "continuous") 



cont_color_plot +
  scale_color_gradientn(colors = rev(my_parks_palette)) #n allows you to choose a number of colors, smooths across those values
# use rev() to reverse order of your palette (not all allow direction = -1)
```

------------------------------------------------------------------------

**Climate and environmental science visualizations can (should) draw from community standards, when possible**

## 

**Some widely-used climate science palettes:**

![](images/clipboard-3675056584.png){width="580"}

**Figure 4.** Appropriate diverging and sequential colour schemes for the following climate data (a), absolute temperature (b), absolute precipitation (c), temperature anomaly (d), precipitation or runoff anomaly (e and f) other climate variables with no symbolic association . Schemes in this figure are 7 class ones designed by Cynthia Brewer, ([Brewer et al. 2003](https://tizmogollon.weebly.com/uploads/1/5/4/7/15475746/brewer_etal_2003_colorbrewer_in_print.pdf))

**Citation:** Kaye NR, Hartley A, Hemming D (2012) Mapping the climate: guidance on appropriate techniques to map climate variables and their uncertainty. Geoscientific Model Development. 5:245-256. www.geosci-model-dev.net/5/245/2012/ ([PDF download](https://www.researchgate.net/publication/307824079_Mapping_the_climate_guidance_on_appropriate_techniques_to_map_climate_variables_and_their_uncertainty))

## Want to design your own palette? Here are some helpful guidelines and considerations…

<https://samanthacsik.github.io/EDS-240-data-viz/slides/week5.2-colors-slides.html#/select-hue>

### **Select hues using color wheels / pickers**

There are lots of different variations of color wheels, but look for hues along the **outer edge**:

-   Common color models: RYB (used by painters), RGB (used in electonic displays), CMYK (used in modern printing). Image source: [medium.com](https://broworks.medium.com/color-guide-terms-definitions-and-useful-websites-6fa4f13bcb85)

When using a color picker, **adjust the HEX code sliding scale** to pick a hue and ensure that the selector is set to the **far right edge** of the box:

-   There are lots of great color pickers out there, though [Google color picker](https://www.google.com/search?q=google+color+picker&sca_esv=598283965&ei=uVyjZdXpLtL3kPIPhdaOaA&ved=0ahUKEwiVqoat_9uDAxXSO0QIHQWrAw0Q4dUDCBA&uact=5&oq=google+color+picker&gs_lp=Egxnd3Mtd2l6LXNlcnAiE2dvb2dsZSBjb2xvciBwaWNrZXIyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyDRAAGIAEGIoFGEMYsAMyDRAuGIAEGIoFGEMYsANI6QRQAFgAcAF4AZABAJgBAKABAKoBALgBA8gBAOIDBBgAIEGIBgGQBgo&sclient=gws-wiz-serp) is a quick one to navigate to. [HTML color codes](https://htmlcolorcodes.com/) is my personal favorite.

### **Use color wheels identify color harmonies**

-   Image source: [htmlcolorcodes.com](https://htmlcolorcodes.com/color-picker/)

-   blue-green & red-orange are complementary and therefore offer the strongest possible contrast

-   Find descriptions of [blue-green](https://htmlcolorcodes.com/colors/blue-green/) & [red-orange](https://htmlcolorcodes.com/colors/red-orange/) on [htmlcolorcodes.com](https://htmlcolorcodes.com/)

### **Hues have associated meaning**

We associate meaning with different hues (e.g. cold / sad = blue, hot / angry = red), and *importantly,* these **associations can differ among cultures**.

-   Source for image in slide: [Information is Beautiful](https://informationisbeautiful.net/visualizations/colours-in-cultures/)

**Some associations span multiple cultures**

-   <https://samanthacsik.github.io/EDS-240-data-viz/slides/week5.2-colors-slides.html#/multicultural-colors>

-   red-blue color rug visualization example

    -   Source: Ed Hawkins [(showyourstripes.info)](https://showyourstripes.info/)

### **Colors elicit emotional responses**

-   “lightness, brightness, and saturation can communicate the level of seriousness, intensity, and emotional weight in a visual work” ([Cédric Scherer](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/))

Examples:

-   [The Great British Bake Off \| Race to the Top](https://github.com/cararthompson/tidytuesdays?tab=readme-ov-file#2022-09---gbbo), by [Cara Thompson](https://www.cararthompson.com/) ([source code](https://github.com/cararthompson/tidytuesdays/blob/main/scripts/202210_gbbo.R))

-   [The LEGO Color Explosion](https://github.com/z3tt/TidyTuesday?tab=readme-ov-file#202236--lego-database-by-rebrickable), by [Cédric Scherer](https://www.cedricscherer.com/) ([source code](https://github.com/z3tt/TidyTuesday/blob/main/R/2022_36_LEGO_bricks.qmd))

-    [COVID-19 tracker](https://coronavirus.jhu.edu/map.html) by the Johns Hopkins University (screenshot from 2020-07-27, courtesy of [Cédric Scherer](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/)). Red tends to elicit panic / fear.

-   A map of confirmed COVID-19 cases by Datawrapper (screenshot from 2020-07-27, courtesy of [Cédric Scherer](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/)). Blues and greens help to avoid such a strong fearful emotional response.

darker, morbid colors carry more emotional weight

> “We show the **current or confirmed cases in another color than red**. The coronavirus is **not a death sentence**. Most infected people will survive. If you’re infected, you want to find yourself on a map as a blue (or yellow, or beige, or purple…) dot, not as a “attention, danger, run!”-screaming red dot. **Related, we show deaths in black, not red – it feels more respectful**.”

\- Lisa Charlotte Muth in [17 (or so) responsible live visualizations about the coronavirus, for you to use](https://blog.datawrapper.de/coronaviruscharts/), published March 3, 2020

NYT full spread image when we hit 1M covid deaths

Learn more about this award-winning visualization in an interview with Carrie Mifsud: [Capturing One Million Deaths on a Page: A Chat with NYT’s Carrie Mifsud](https://nightingaledvs.com/capturing-one-million-deaths-on-a-page-carrie-mifsud/)

### **Using pure hues can be overwhelming, use more subdued colors instead**

Though it may be temping to use bright / bold colors to grab attention, it can lead to eye strain and make it more challenging for your readers to focus on your chart.

-   example Image source: [5 pitfalls to avoid when working with color in data visualization](https://flourish.studio/blog/color-in-data-visualization/)

### **A few approaches for subduing a pure hue**

1.   **adjust the saturation** (i.e. the level of intensity of a color)
2.   **adjust value**: tint (add white), tone (add gray), or shade (add black)
3.  **increase transparency** (e.g. using the `alpha` argument)

-   Saturation adjusted using the HSL (Hue, Saturation, Lightness) color model. Read about [HSL vs HSV color models](https://en.wikipedia.org/wiki/HSL_and_HSV#:~:text=HSL%20stands%20for%20hue%2C%20saturation,hue%2C%20saturation%2C%20and%20intensity.) if you want a deeper dive.

-   The default chroma for ggplots is set to 100%

-   Use `scale_*_hue()` to adjust chroma (saturation)

    -   `scale_*_hue()` uses colors based on the [HCL color model](https://en.wikipedia.org/wiki/HCL_color_space).

Tint:

-   The default lightness for ggplots is set to 65%

-   Use `scale_*_hue()` to adjust lightness / darkness

`scale_*_hue()` uses colors based on the [HCL color space](https://en.wikipedia.org/wiki/HCL_color_space). The default lightness value of 65(%) is good for filled areas but may be a bit light for points and lines.

Opacity:

-   reducing can help make things more legible (alpha argument)

### **Building your own color palette**

Be sure to consider what we’ve already discussed:

-   ensure that you’re picking colorblind-friendly color combos

-   use color wheels to identify color harmonies

-   think carefully about what emotions / messages your color choices will convey

-   avoid lots of pure / fully-saturated hues

And also consider some other important sources of inspiration:

-   your company or organization’s brand / logo

-   steal colors from your favorite / relevant images using tools like [Color Thief](https://lokeshdhakar.com/projects/color-thief/)

-   use a randomized palette generator, like [coolers.co](https://coolors.co/?home)

### **Some common functions for scaling colors**

**For qualitative (categorical) data** ![A qualitative color scale with 5 distinct colors: dark blue, medium blue, yellow, orange, red.](https://samanthacsik.github.io/EDS-240-data-viz/slides/images/week5/qualitative.png){alt="A qualitative color scale with 5 distinct colors: dark blue, medium blue, yellow, orange, red." width="249"} **:**

-   `scale_*_manual()`

**For quantitative (numeric) data:**

Unclassed palettes ![An unclassed sequential color scale which transitions from light to dark blue moving left to right.](https://samanthacsik.github.io/EDS-240-data-viz/slides/images/week5/unclassed-seq.png){alt="An unclassed sequential color scale which transitions from light to dark blue moving left to right." width="293"} :

-   `scale_*_gradient()`: creates a two color gradient (low-high)

-   `scale_*_gradient2()`: creates a diverging color gradient (low-mid-high)

-   `scale_*_gradientn()`: creates a n-color gradient

Classed palettes ![A classed sequential color scale with 5 binned colors ranging from light blue on the left to dark blue on the right.](https://samanthacsik.github.io/EDS-240-data-viz/slides/images/week5/classed-seq.png){alt="A classed sequential color scale with 5 binned colors ranging from light blue on the left to dark blue on the right."} :

-   `scale_*steps()`: creates a two color binned gradient (low-high)

-   `scale_*_steps2()`: creates a diverging binned color gradient (low-mid-high)

-   `scale_*_stepsn()`: creates a n-color binned gradient

**Use the `fill` variant of the above functions for areas, bars, etc. and the `color` variant for points, lines, etc.**

**Tip: Save your palette outside of your ggplot:**

"I recommend saving your palette to a named vector *outside* of your ggplot – this prevents lengthy palettes from creating cluttered ggplot code *and* allows you to reuse your palette across multiple plots"

```{r}
my_palette <- c("#32DE8A", "#E36414", "#0F4C5C")
```

Here, we scale our colors for a categorical variable (species) using `scale_color_manual()`:

```{r}
cat_color_plot +
  scale_color_manual(values = my_palette)
```

### **Tip: Set color names** 

We should always be consistent with our colors. **E.g. if Gentoo penguins are blue in one plot, they should be blue in all plots.** Notice that our colors don’t “stick” with the species they represent, but rather they’re applied in the order that they appear in our palette:

```{r}
# Adelie, Chinstrap & Gentoo penguins
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette)

# Just Adelie & Gentoo penguins
penguins |> 
  filter(species != "Chinstrap") |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette)
```

Setting the names of our vector elements (colors) ensures that they stick with those factor levels across all of our visualizations:

```{r}
my_palette_named <- c("Adelie" = "#32DE8A",
                      "Chinstrap" = "#E36414",
                      "Gentoo" = "#0F4C5C")
```

```{r}
# Adelie, Chinstrap & Gentoo penguins
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette_named)

# Just Adelie & Gentoo penguins
penguins |> 
  filter(species != "Chinstrap") |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette_named)
```

### **Tip: modify df to apply colors to observations**

The [`scale_*_identity()` functions](https://ggplot2.tidyverse.org/reference/scale_identity.html) allows you to map aesthetic values from your data frame to individual points. They will not produce a legend unless specified using `guide = "legend"`.

```{r}
test <- penguins |> 
  mutate(
    my_color = case_when(
      bill_length_mm < 40 ~ "#D7263D", # smaller than 40, this color
      between(bill_length_mm, 40, 50) ~ "#E4BB87", # in between this range, this color
      bill_length_mm > 50 ~ "#386150" #  bigger than 50, this color
      
    )
  )
```

```{r}
penguins |> 
  mutate(
    my_color = case_when(
      bill_length_mm < 40 ~ "#D7263D",
      between(bill_length_mm, 40, 50) ~ "#E4BB97",
      bill_length_mm > 50 ~ "#386150"
    )
  ) |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = my_color)) +
  geom_point(size = 4, alpha = 0.7) +
  scale_color_identity()


penguins |> 
  mutate(
    my_color = case_when(
      body_mass_g > 6000 ~ "#D7263D", # body mass > 6k, be this color
      TRUE ~ "gray50" # everything else, be this color
    )
  ) |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = my_color)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_identity(guide = "legend", 
                       # if we don't update the name and labels, it'll set the labels to
                       # colornames (values in my_color column)
                       name = "Body mass (g)", labels = c(">6000", "<= 6000"))

```

**Create your own palettes!**

Create your own palettes and use them to scale colors in the plots below:

```{r}


ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) 


ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) 
```

------------------------------------------------------------------------

There are also some additional rules / guidelines that you should pretty much always abide by when selecting colors

### Additional Rules

**High saturation = greater / more important values**

-   It’s okay to use saturated / brighter colors in moderation.

-   *We tend to associate **more saturated** colors with **greater values**.*

**No more than 7 colors**

-   If you need more than seven colors, consider alternative chart types.

**Use colors consistently**

-   Ensure consistent use of colors across multiple visualizations that display the same groups.

**Explain what your colors encode**

-   Always include a color key, in the form of a traditional legend or otherwise.

**Highlight important values**

-   Use gray for less important groups / values, annotations, contextual information, etc.

**Be predictable in your color choices**

-   Use intuitive colors (e.g. green for forest, blue for water) but avoid stereotypes (e.g. pink for women, blue for men).

-   Try a cold color for men (e.g. blue or purple) and a warmer color for women (e.g. yellow, orange or a warm green).

-   *Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/), by Lisa Charlotte Muth*

**Bright = low, dark = high**

(especially for maps)

-   In most cases, readers will associate bright colors with lower values and darker colors with higher values. Build gradients accordingly.

**Except in some cases. . .**

> “humans perceive bright colors on elevation maps to represent a high altitude, with darker colors representing naturally low-lying and shady areas like valley” (Cédric Scherer, [Colors and Emotions in Data Visualization](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/#:~:text=Dark%20and%20saturated%20colors%20are,perceived%20differently%20in%20different%20cultures.))

-   Filled contour plot of Mt. Shasta. Image source: [EarthLab](https://www.earthdatascience.org/tutorials/visualize-digital-elevation-model-contours-matplotlib/)

-   USGS Digital Elevation Model of Pohnpei (Micronesia). Image source: [PacIOOS](https://www.pacioos.hawaii.edu/voyager-news/digital-elevation-models/)

**Gradient palettes for continuous data only**

-   Most readers will associate dark colors with “high / important” and bright or light colors with “low / less”. Using a gradient palette with categorical data may imply a ranking of categories where there shouldn’t be.

**Use lightness, not just hue, to build gradients**

-   Gradients should also work in black and white.

**Two hues are sometimes better than one**

-   Readers are generally better able to distinguish colors on a gradient better if they are encoded through both lightness and two (sometimes three) carefully-selected hues.
