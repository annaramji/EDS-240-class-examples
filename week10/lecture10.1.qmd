---
author: "Anna Ramji"
date: 2024-03-11
title: "EDS 240 | Lecture 10.1: Misc. charts: waffle & bump ch"
---

## Waffle Charts

```{r}
library(waffle) # for making waffle (square pie) charts in R
library(ggbump) # a geom for creating bump charts

knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

### Waffle chart (seasonal Bigfoot sightings in CA)

Anyone may report a [Bigfoot sighting](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-09-13) to the [Bigfoot Field Researchers Organization (BFRO)](https://www.bfro.net/). TidyTuesday featured these compiled BFRO reports on [2022-09-13](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-09-13).

```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(waffle) # for making waffle (square pie) charts in R
library(showtext) # a geom for creating bump charts

#..........................import data...........................
bigfoot <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-09-13/bigfoot.csv')

#..........................import fonts..........................
font_add_google(name = "Ultra", family = "ultra")
font_add_google(name = "Josefin Sans", family = "josefin")

#................enable {showtext} for rendering.................
showtext_auto()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# grabbing just CA data, counting by season, removing "Unknown" season counts
ca_season_counts <- bigfoot |> 
  filter(state == "California") |> 
  group_by(season) |> 
  count(season) |> 
  filter(season != "Unknown") |> 
  # arrange colors in plot to follow this order
  # match comes from a SQL function
  arrange(match(season, c("Spring", "Summer", "Fall", "Winter"))) |> 
  ungroup() |> 
  # arrange these colors as such in the legend as well
  mutate(season = fct_relevel(season, "Spring", "Summer", "Fall", "Winter"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                waffle chart                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#........................create palettes.........................
season_palette <- c("Spring" = "#357266", 
                    "Summer" = "#FFB813", 
                    "Fall" = "#983A06", 
                    "Winter" = "#005F71")

plot_palette <- c(gray = "#757473",
                  beige = "#EFEFEF")

#.......................create plot labels.......................
title <- "Summer is the season of Bigfoot sightings in CA"
subtitle <- "Winter, on the other hand, is a rare time to spot Sasquatch"
caption <- "Source: Bigfoot Field Researchers Organization"
```

```{r in-class-waffle}
# base plot
ggplot(ca_season_counts, 
       aes(fill = season, values = n)) +
  geom_waffle()

# start customizing: color of linest between squares, size of those lines, number of rows in waffle

ggplot(ca_season_counts, 
       aes(fill = season, values = n)) +
  geom_waffle(color = "white", size = 0.3,
              # default is 10
              n_rows = 10) +
  # make rectangles into nice squares
  coord_equal() +
  # update colors with season palette
  scale_fill_manual(values = season_palette) +
  # set labels, titles to predefined labels (text objects)
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  # get rid of axes
  theme_void() 
```

```{r detailed-waffle}
#......................create waffle chart.......................
ggplot(ca_season_counts, aes(fill = season, values = n)) +
  geom_waffle(color = "white", size = 0.3, 
              n_rows = 10, make_proportional = FALSE) +
  coord_equal() +
  scale_fill_manual(values = season_palette) +
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  theme_void() +
  theme(
    plot.title = element_text(family = "ultra", 
                              size = 18, 
                              hjust = 0.5,
                              margin = margin(t = 0, r = 0, b = 0.3, l = 0, "cm")),
    plot.subtitle = element_text(family = "josefin",
                                 size = 16,
                                 hjust = 0.5,
                                 margin = margin(t = 0, r = 0, b = 0.5, l = 0, "cm")),
    plot.caption = element_text(family = "josefin",
                                size = 10,
                                color = plot_palette["gray"], # grab the value (hexcode in our palette) at this index ("gray" label)
                                margin = margin(t = 0.75, r = 0, b = 0, l = 0, "cm")),
    legend.position = "bottom",
    legend.title = element_blank(), # remove legend title (when u want to remove entirely, set to "FALSE" rather than element blank)
    legend.text = element_text(family = "josefin",
                               size = 12),
    # changing color of plot background
    plot.background = element_rect(
      fill = plot_palette["beige"], # fills the panel space (immediately around the plot)
      color = plot_palette["beige"] # colors the border (default is black) around the rest of the plot / panel space 
                                   ), 
    # adding space around plot (ideal for when your plot background isn't white and you want to add that margin space)
    plot.margin = margin(t = 2, r = 2, b = 2, l = 2, "cm")
  )
```

every square represents an observation in our data set

### Proportional waffle chart (seasonal Bigfoot sightings in CA)

```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          proportional waffle chart                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#........................create palettes.........................
season_palette <- c("Spring" = "#357266", 
                    "Summer" = "#FFB813", 
                    "Fall" = "#983A06", 
                    "Winter" = "#005F71")

plot_palette <- c(gray = "#757473",
                  beige = "#EFEFEF")

#.......................create plot labels.......................
title <- "Summer is the season of Bigfoot sightings in CA"
subtitle <- "Only 10% of Sasquatch sightings occur in the winter"
caption <- "Source: Bigfoot Field Researchers Organization"

#......................create waffle chart.......................
ggplot(ca_season_counts, aes(fill = season, values = n)) +
  geom_waffle(color = "white", size = 0.3, 
              n_rows = 10,
              # proportional argument!! 
              make_proportional = TRUE) +
  coord_equal() +
  scale_fill_manual(values = season_palette) +
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  theme_void() +
  theme(
    plot.title = element_text(family = "ultra", 
                              size = 18, 
                              hjust = 0.5,
                              margin = margin(t = 1, r = 0, b = 0.3, l = 1, "cm")),
    plot.subtitle = element_text(family = "josefin",
                                 size = 16,
                                 hjust = 0.5,
                                 margin = margin(t = 0, r = 0, b = 0.5, l = 0, "cm")),
    plot.caption = element_text(family = "josefin",
                                size = 10,
                                color = plot_palette["gray"], 
                                hjust = 0,
                                margin = margin(t = 0.75, r = 0, b = 0, l = 0, "cm")),
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(family = "josefin",
                               size = 12),
    plot.background = element_rect(fill = plot_palette["beige"], 
                                   color = plot_palette["beige"]),
    # adjust these margins for the new plot shape, dimensions
    plot.margin = margin(t = 1.5, r = 8, b = 1.5, l = 8, "cm")
  )
```

default is 10 by 10 grid, can update in n_rows argument, can also flip the orientation

## Bump charts

Bump charts offer a way to visualize changes in rank over time

They do not, however, provide information about the actual or relative magnitudes of difference between rankings. If thatâ€™s important to show, consider an alternative chart type (or something like the ribbon bump chart to the right!).

![height-adjusted](https://samanthacsik.github.io/EDS-240-data-viz/slides/images/week10/rapp-bump-charts.png)

In this example, they changed the height of the bars to give a better sense of scale.

**Bump chart (highest paying occupations)**

------------------------------------------------------------------------

The [US Bureau of Labor Statistics](https://www.bls.gov/) provides data on occupations and earnings. TidyTuesday featured these compiled data on [2019-03-05](https://github.com/rfordatascience/tidytuesday/blob/master/data/2019/2019-03-05/readme.md) (these are the same data we used to create our dumbbell plot during lectures [4.1](https://samanthacsik.github.io/EDS-240-data-viz/slides/week4.1-rankings-slides.html#/dumbbell-plot-output) and [6.1](https://samanthacsik.github.io/EDS-240-data-viz/slides/week6.1-typography-slides.html#/updated-text)).

```{r bump-chart}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(ggbump)
library(ggtext)
library(showtext)

#..........................import data...........................
jobs <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv")

#..........................import fonts..........................
font_add_google(name = "Passion One", family = "passion")
font_add_google(name = "Oxygen", family = "oxygen")

#................enable {showtext} for rendering.................
showtext_auto()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#...................rank occupations by salary...................
salary_rank_by_year <- jobs |> 
  select(year, occupation, total_earnings) |> 
  group_by(year) |> 
  mutate(
    rank = row_number(desc(total_earnings))
  ) |> 
  ungroup() |> # ungroup to run the next function properly
  arrange(rank, year) # order by rank and year

#..........get top 8 occupations for final year (2016)...........
top2016 <- salary_rank_by_year |>  
  # top 8 occupations in 2016
  filter(year == 2016, rank <= 8) |>  
  pull(occupation) # works like "$"

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                 bump chart                               ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.................create palette & assign colors.................
occupations_palette <- viridisLite::magma(12)
occupation_colors <- c(
  # starting at color 3 because 1 and 2 are basically the color black
  "Physicians and surgeons" = occupations_palette[3],
  "Nurse anesthetists" = occupations_palette[4],
  "Dentists" = occupations_palette[5],
  "Architectural and engineering managers" = occupations_palette[6],
  "Lawyers" = occupations_palette[7], 
  "Podiatrists" = occupations_palette[8],
  "Chief executives" = occupations_palette[9],
  "Petroleum engineers" = occupations_palette[10]
)

plot_palette <- c(dark_purple = "#2A114E", 
                  dark_gray = "#6D6B71",
                  light_pink = "#FFF8F4")

#.......................create plot labels.......................
title <- "Top eight highest paying occupations in 2016"
subtitle <- "Medical professionals held onto the same top three spots across years, while <span style='color:#FEA873FF;'>**petroleum engineers**</span> steadily climbed the ranks from 10^th^ in 2013 to 4^th^ in 2016"
caption <- "Data Source: Bureau of Labor Statistics"
```


```{r in-class-bump}
# baseline / default bump plot
salary_rank_by_year |> 
  # just want to work with the 8 highest-paying occupations in 2016
  filter(occupation %in% top2016) |> 
  ggplot(aes(x = year, y = rank,
             # color lines by occupation
             color = occupation)) +
  geom_point() + 
  geom_bump(linewidth = 1)  # adjust linewidth arg for increased thickness
  
  
  
# updated level 1 bump plot
salary_rank_by_year |> 
  # just want to work with the 8 highest-paying occupations in 2016
  filter(occupation %in% top2016) |> 
  ggplot(aes(x = year, y = rank,
             # color lines by occupation
             color = occupation)) +
  geom_point(shape = "|",  # update points to lines
             size = 6) + 
  geom_bump(linewidth = 1) + # adjust linewidth arg for increased thickness
  geom_text(
    data = salary_rank_by_year |> filter(year == 2016, occupation %in% top2016),
    aes(label = occupation),
    family = "oxygen",
    fontface = "bold"
  )

# updated level 2 bump plot
salary_rank_by_year |> 
  # just want to work with the 8 highest-paying occupations in 2016
  filter(occupation %in% top2016) |> 
  ggplot(aes(x = year, y = rank,
             # color lines by occupation
             color = occupation)) +
  geom_point(shape = "|",  # update points to lines
             size = 6) + 
  geom_bump(linewidth = 1) + # adjust linewidth arg for increased thickness
  geom_text(
    data = salary_rank_by_year |> 
      filter(year == 2013, # year 2013 puts text on 2013 side of the plot
             occupation %in% top2016),
    aes(label = occupation),
    family = "oxygen",
    fontface = "bold",
    hjust = 1,
    # nudge so that text isn't on top of line ??
    nudge_x = -0.1
  ) +
  # reverse y axis order so that 1 is on top 
  scale_y_reverse() + 
  scale_color_manual(values = occupation_colors) + 
  theme_void() +
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  theme(
    legend.position = "none"
  )
```


```{r}
#........................create bump chart.......................
salary_rank_by_year |>  
  filter(occupation %in% top2016) |>  
  ggplot(aes(x = year, y = rank, color = occupation)) + 
  geom_point(shape = "|", size = 6) + 
  geom_bump(linewidth = 1) +
  geom_text(
    data = salary_rank_by_year |> filter(year == 2013, occupation %in% top2016),
    aes(label = occupation),
    hjust = 1,
    nudge_x = -0.1,
    family = "oxygen",
    fontface = "bold"
  ) +
  geom_text(
    data = salary_rank_by_year |> filter(year == 2016, occupation %in% top2016),
    aes(label = rank),
    hjust = 0,
    nudge_x = 0.1,
    size = 5,
    family = "oxygen",
    fontface = "bold"
  ) +
  annotate(
    geom = "text",
    x = c(2013, 2016),
    y = c(-0.2, -0.2),
    label = c("2013", "2016"),
    hjust = c(0, 1),
    vjust = 1,
    size = 5,
    family = "oxygen",
    fontface = "bold",
    color = plot_palette["dark_gray"],
  ) +
  scale_y_reverse() +
  scale_color_manual(values = occupation_colors) +
  coord_cartesian(xlim = c(2010, 2016), ylim = c(11, 0.25), 
                  clip = "off") +
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  theme_void() +
  theme(
    legend.position = "blank",
    plot.title = element_text(family = "passion",
                              size = 25,
                              color = plot_palette["dark_purple"],
                              margin = margin(t = 0, r = 0, b = 0.3, l = 0, "cm")),
    plot.subtitle = element_textbox_simple(family = "oxygen",
                                           size = 15,
                                           color = plot_palette["dark_gray"],
                                           margin = margin(t = 0, r = 0, b = 1, l = 0, "cm")),
    plot.caption = element_text(family = "oxygen",
                                color = plot_palette["dark_gray"],
                                margin = margin(t = 0.3, r = 0, b = 0, l = 0, "cm")),
    plot.background = element_rect(fill = plot_palette["light_pink"],
                                   color = plot_palette["light_pink"]),
    plot.margin = margin(t = 1, r = 1, b = 1, l = 1, "cm")
  )
```

